The Go programming language
A fast smooth introduction to the language
15:04 18 Apr 2018
Tags: golang, introduction, discovery

Yannick Heinrich
EEA Engineer, Swissquote SA
blog@yageek.net
http://blog.yageek.net
@yageek

: I'm Yannick. I work as iOS Developer in the mobile development department.
: I joined SQ in April 2018.
: I will present the Go programming language
: and I hope you will give Go a chance after this presentation.

* Summary
: I know we have people with different background.
: Feel free to ask or correct me if necessary.
: About issues: issue I think are the main ones.
- Issues related to software development
- Go at the rescue
- Go AFK
- Go from the trenches
* Issues related to software development
* Issue #1 - Readability and Confidence

: May be the most important one.

.image ./images/tweet_readability.png
- You rarely work alone on the code.
- If yes, your code will stay, but on your concern, we never know.


* Issue #2 - Deployment/Distribution
- The longer you take to deploy, the longer you will take to solve a production issue.
- Accessing libraries registry may need Github mirroring.
- Targeting several OS can become painful

*Deployment*with*Rails*at*Parse.com*

- 20 minutes to do a full deploy or rollback
- Unicorn, Capistrano, RVM, lots of gems 

* Reminder
 
- Concurrency !== Parallelism
- Concurrency: Programming as the composition of independently executing processes.
- Parallelism: Programming as the simultaneous execution of (possibly related) computations

: Concurrency is about dealing with lots of things at once.
: Parallelism is about doing lots of things at once.
: Not the same, but related.
: Concurrency is about structure, parallelism is about execution.
: Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.

* Reminder 

- 1 Process === 1 Application, 1 Thread === 1 Task within an Application
- 1 Thread ber CPU/Core
- Thread operations are costly in time

: Apache long time ago, spawn a thread per visitor
: Syscalls are costly too.

.image ./images/ThreadDiagram.png
.caption Typical relationsip between threads and processes. http://www.javamex.com/tutorials/threads/how_threads_work.shtml

* Issue #3 - Performance and Concurrency
.image ./images/gophercomplex5.jpg

- The less server you use, the less it will cost.
- Dealing with concurrency can become seriously complex.
- Some interpreted languages does not allow parallelism (CRuby, CPython).

.link https://en.wikipedia.org/wiki/Global_interpreter_lock Global interpreter lock
.link https://www.igvita.com/2008/11/13/concurrency-is-a-myth-in-ruby/ Parallelism is a Myth in Ruby

* Go at the rescue
* Deal with Issue #1 - Readability and Confidence
_Syntax_is_not_important..._-_unless_you_are_a_programmer_, Rob Pike

- One syntax to rule them all
- Duck typing checked at compilation 
- Strongly typed
- Feels good like C, C++ without malloc and free (Mark and Sweep GC)
- No generics
- No exceptions but error values
- No inheritance but composition
- Pointer but no pointer arithmetics

* Deal with Issue #2 - Deployment/Distribution

- No more sword fight
- No dependency hell, you get one binary, period.
- Cross-Platform, Cross-Architecture and Cross-compilation just easy 

.image ./images/compiling.png
.caption https://xkcd.com/303/
* Deal with Issue #3 - Performance and Concurrency

- 100% native code
- No libc, but native C FFI.
- Optimization with Assembly
- Synchronisation based on [[http://spinroot.com/courses/summer/Papers/hoare_1978.pdf][CSP]] (like Erlang, Rust, Akka in Scala)
- Use kind of _Green_Threads_ mapped on OS threads called *goroutine*

: Communicating Sequential Processes
* 
.link https://blog.iron.io/how-we-went-from-30-servers-to-2-go/ Iron.IO - How We Went from 30 Servers to 2: Go

- Dropped from 30 to 2 servers and the second server was used only for redundancy.
- CPU utilization dropped to less than 5%.
- Memory usage dropped. Only a "few hundred KB's of memory (on startup) vs our Rails apps which were ~50MB (on startup)". 

.link http://blog.parseplatform.org/learn/how-we-moved-our-api-from-ruby-to-go-and-saved-our-sanity/ How We Moved Our API From Ruby to Go and Saved Our Sanity
- 250k connections per node to 1.5 million connections per node
- full integration test suite dropped from 25 minutes to 2 minutes
- full API server deploy with rolling restarts dropped from 30 minutes to 3 minutes

* Go AFK
* Go history

- Project started as internal project at Google in 2007 and Open-sourced in 2009 with a BSD-style license
- Backed by brilliant engineers: Rob Pike, Kenneth Thomson, Robert Griesemer, Brad Fitzpatrick and many others.
- Developed to be good targeting server development.
- In fact, good for a lot of other stuff.

.image ./images/gophers.png
.caption _Gopher_ by [[http://www.reneefrench.com][Ren√©e French]]

* Come with batteries included

- SQL Database
- Syscall
- TCP/IP, FTP, HTTP1/2, Http Push, SMTP, SSH, TLS
- JSON, XML, HTML, templating, CSV
- Unicode
- Image processing
- Crypto: RSA, AES, DES, SHA, TLS, x509
- Compression: bz2, gz, lzw, zip
- Math
- Go AST, debug, sytax
- Reflection (introspection)
- Testing framework (assertions)

* Gopher is the new hipster

- Interest is growing good
.image ./images/evolution.png _ 950
.caption The growth of Google searches for the term "golang" over the years

- Dozen of Go User Groups
- Big meetings: dotGo, GopherIndia, GothamGo, GopherCon, GoCon

* Some awesome Go projects

Celebrities:
- [[https://docker.io][Docker]]: An open platform for distributed applications for developers and sysadmins
- [[https://www.consul.io][consul]]: Service Discovery
- [[https://github.com/coreos/etcd][etcd]]: Key-value store for shared configuration and service discovery
- [[https://www.terraform.io][Terraform]]: Terraform is a tool for building, changing, and combining infrastructure safely and efficiently.

Others:
- [[https://github.com/golang/go/wiki/Mobile][Go Mobile]]: Java <-> Go, Objective-C <-> Go
- [[http://limetext.org/][limetext]]: Lime Text is a powerful and elegant text editor primarily developed in Go that aims to be a Free and open-source software successor to Sublime Text.
- [[https://github.com/fogleman/nes][nes]]: A Nintendo Entertainment System (NES) emulator written in Go
- [[https://gopherjs.github.io][gopherJS]]: GopherJS - A compiler from Go to JavaScript (Goroutine included)

* Who uses Go?

Internet:
- Google, Uber, Yahoo, Youtube, Zalando, Atlassian, Reddit, Netflix, Facebook, Dropbox, Disqus, Tumblr, Twitch, Heroku, Cloudfare, SoundCloud,...

Nerds:
- Github, Sourcegraph

You did not expect them:
- BBC, Novartis, Thomson Reuters, The New-York Times

Games:
- Zynga

.link https://code.google.com/p/go-wiki/wiki/GoUsers More Golang User

* Go from the trenches
* Variables
.play code/variables.go

* Error management
.play code/errors.go

* Custom type
.play -edit code/custom_types_2.go

* Composition over inheritance
.play code/composition.go

* Interface and Duck typing
- _When_I_see_a_bird_that_walks_like_a_duck_and_swims_like_a_duck_and_quacks_like_a_duck,_I_call_that_bird_a_duck_  James Whitcomb Riley
- Go deals with polymorphism through the concept of _interface_
- No need to import the interface, just implement
* 
.play code/interfaces.go

* Goroutine
.play code/goroutine.go

* Channel

.play code/channel.go

* Channel

.play code/channel_2.go

* Select

.play code/select.go

* Conclusion
- Abuse of Go !
- Start the Go Tour:  [[http://tour.golang.org]]
- See the Go Codewalks: [[https://golang.org/doc/codewalk/]]

* References
- The bible, coran and torah: [[http://golang.org]]
- The Go blog: [[http://blog.golang.com]]
- Main GoDoc server: [[https://godoc.org]]
- Google: search for *golang*

* Thanks
- The Go team
- Thanks to [[https://github.com/soulou][@soulou]] from [[https://scalingo.com][Scalingo]]

* Questions
